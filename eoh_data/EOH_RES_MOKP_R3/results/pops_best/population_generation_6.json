{
     "algorithm": "Create a new population using deterministic tournament selection, single-point crossover, and a heuristic-based mutation that favors items with higher value-to-weight ratios.",
     "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    # {Create a new population using deterministic tournament selection, single-point crossover, and a heuristic-based mutation that favors items with higher value-to-weight ratios.}\n\n    # Initialize the new population\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    \n    for i in range(POP_SIZE):\n        # Deterministic tournament selection\n        competitors = np.random.choice(POP_SIZE, 2, replace=False)\n        if pops['rankings'][competitors[0]] < pops['rankings'][competitors[1]]:\n            winner = pops['individuals'][competitors[0]]\n        else:\n            winner = pops['individuals'][competitors[1]]\n\n        # Single-point crossover\n        point = np.random.randint(1, N_P)\n        if i > 0:  # Ensure we have at least one parent from the previous generation\n            parent = new_pops[np.random.randint(i)]\n            child = np.concatenate((winner[:point], parent[point:]))\n        else:\n            child = winner.copy()  # The first individual is a copy of the winner\n\n        # Heuristic-based mutation\n        value_weight_ratio = V.sum(axis=1) / W\n        sorted_indices = np.argsort(value_weight_ratio)[::-1]\n        for j in sorted_indices:\n            if child[j] == 0 and np.dot(child, W) + W[j] <= C:\n                child[j] = 1  # Add item if it improves the value without exceeding weight\n            elif child[j] == 1 and np.random.rand() < 0.05:\n                child[j] = 0  # Randomly remove item with a small probability\n\n        # Ensure the child meets the weight constraint\n        while np.dot(child, W) > C:\n            overweight_indices = np.where(child == 1)[0]\n            child[np.random.choice(overweight_indices)] = 0\n\n        # Add the child to the new population\n        new_pops[i] = child\n\n    return new_pops",
     "objective": 0.98732,
     "other_inf": null
}