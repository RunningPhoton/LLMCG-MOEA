[
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    # Tournament-based selection with a tournament size of 2\n    def tournament_selection(rankings, tournament_size=2):\n        selected_indices = []\n        for _ in range(tournament_size):\n            selected_indices.append(np.random.randint(len(rankings)))\n        selected_rankings = rankings[selected_indices]\n        return selected_indices[np.argmin(selected_rankings)]\n\n    # Single-point crossover\n    def single_point_crossover(parent1, parent2):\n        crossover_point = np.random.randint(1, len(parent1))\n        child = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n        return child\n\n    # Mutation with a dynamic mutation rate based on the individual's rank\n    def dynamic_mutation(individual, rankings, rank):\n        mutation_rate = 0.1 / (1 + np.log(rankings[rank] + 1))\n        mutation_mask = np.random.rand(N_P) < mutation_rate\n        individual ^= mutation_mask.astype(np.int32)\n        return individual\n\n    # Proportional value-to-weight repair mechanism\n    def proportional_repair(individual, W, C, V):\n        weight = np.dot(individual, W)\n        while weight > C:\n            items = np.where(individual == 1)[0]\n            item_weights = W[items]\n            item_values = V[items].sum(axis=1)\n            # Remove the item with the highest weight-to-value ratio\n            ratios = item_weights / item_values\n            remove_idx = items[np.argmax(ratios)]\n            individual[remove_idx] = 0\n            weight -= W[remove_idx]\n        return individual\n\n    # Create offspring using tournament selection, single-point crossover, dynamic mutation, and proportional repair\n    def create_offspring(pops, rankings, W, C, V):\n        parent1_index = tournament_selection(rankings)\n        parent2_index = tournament_selection(rankings)\n        parent1, parent2 = pops['individuals'][parent1_index], pops['individuals'][parent2_index]\n        child = single_point_crossover(parent1, parent2)\n        child = dynamic_mutation(child, rankings, parent1_index)\n        child = proportional_repair(child, W, C, V)\n        return child\n\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        new_pops[i] = create_offspring(pops, pops['rankings'], W, C, V)\n\n    return new_pops",
          "objective": 0.98682,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    def rank_based_selection(rankings):\n        probabilities = 1 / (rankings + 1)\n        probabilities /= probabilities.sum()\n        return np.random.choice(len(rankings), p=probabilities)\n\n    def uniform_crossover(parent1, parent2):\n        mask = np.random.randint(2, size=len(parent1))\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def bit_flip_mutation(individual, mutation_rate=0.1):\n        mutation_mask = np.random.rand(N_P) < mutation_rate\n        individual ^= mutation_mask.astype(np.int32)\n        return individual\n\n    def greedy_repair(individual, W, C):\n        weight = np.dot(individual, W)\n        while weight > C:\n            items = np.where(individual == 1)[0]\n            item_weights = W[items]\n            item_values = V[items].sum(axis=1)\n            # Remove the item with the lowest value-to-weight ratio\n            ratios = item_values / item_weights\n            remove_idx = items[np.argmin(ratios)]\n            individual[remove_idx] = 0\n            weight -= W[remove_idx]\n        return individual\n\n    def create_offspring(pops, rankings, W, C):\n        parent1_index = rank_based_selection(rankings)\n        parent2_index = rank_based_selection(rankings)\n        parent1, parent2 = pops['individuals'][parent1_index], pops['individuals'][parent2_index]\n        child = uniform_crossover(parent1, parent2)\n        child = bit_flip_mutation(child)\n        child = greedy_repair(child, W, C)\n        return child\n\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        new_pops[i] = create_offspring(pops, pops['rankings'], W, C)\n    \n    return new_pops",
          "objective": 0.98662,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    # (My novel algorithm uses tournament selection, two-point crossover, and uniform mutation with a fixed mutation rate, followed by a greedy repair function to ensure weight constraint compliance.)\n\n    # Tournament selection\n    def tournament_selection(rankings, tournament_size=3):\n        selected_indices = np.random.choice(len(rankings), tournament_size, replace=False)\n        best_index = selected_indices[np.argmin(rankings[selected_indices])]\n        return best_index\n\n    # Two-point crossover\n    def two_point_crossover(parent1, parent2):\n        point1, point2 = np.sort(np.random.choice(range(1, N_P), 2, replace=False))\n        child = np.zeros(N_P, dtype=np.int32)\n        child[:point1] = parent1[:point1]\n        child[point1:point2] = parent2[point1:point2]\n        child[point2:] = parent1[point2:]\n        return child\n\n    # Uniform mutation\n    def uniform_mutation(individual, mutation_rate=0.05):\n        mutation_mask = np.random.rand(N_P) < mutation_rate\n        individual[mutation_mask] = 1 - individual[mutation_mask]\n        return individual\n\n    # Greedy repair function\n    def greedy_repair(individual):\n        weight = np.dot(individual, W)\n        while weight > C:\n            item_weights = individual * W\n            max_weight_index = np.argmax(item_weights)\n            individual[max_weight_index] = 0\n            weight = np.dot(individual, W)\n        return individual\n\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n\n    for i in range(POP_SIZE):\n        parent1_idx = tournament_selection(pops['rankings'])\n        parent2_idx = tournament_selection(pops['rankings'])\n        parent1 = pops['individuals'][parent1_idx]\n        parent2 = pops['individuals'][parent2_idx]\n\n        child = two_point_crossover(parent1, parent2)\n        child = uniform_mutation(child)\n        child = greedy_repair(child)\n\n        new_pops[i] = child\n\n    return new_pops",
          "objective": 0.98638,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    # Novel algorithm: Tournament selection, uniform crossover, and inversion mutation, followed by a greedy repair function.\n\n    # Tournament selection\n    def tournament_selection(rankings, tournament_size=3):\n        selected_indices = np.random.choice(len(rankings), tournament_size, replace=False)\n        best_index = selected_indices[np.argmin(rankings[selected_indices])]\n        return best_index\n\n    # Uniform crossover\n    def uniform_crossover(parent1, parent2):\n        mask = np.random.randint(0, 2, size=N_P)\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    # Inversion mutation\n    def inversion_mutation(individual):\n        if np.random.rand() < 0.1:  # Mutation probability\n            start, end = np.sort(np.random.choice(N_P, 2, replace=False))\n            individual[start:end] = individual[start:end][::-1]\n        return individual\n\n    # Greedy repair function\n    def greedy_repair(individual):\n        weight = np.dot(individual, W)\n        while weight > C:\n            item_weights = individual * W\n            max_weight_index = np.argmax(item_weights)\n            individual[max_weight_index] = 0\n            weight = np.dot(individual, W)\n        return individual\n\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n\n    for i in range(POP_SIZE):\n        parent1_idx = tournament_selection(pops['rankings'])\n        parent2_idx = tournament_selection(pops['rankings'])\n        parent1 = pops['individuals'][parent1_idx]\n        parent2 = pops['individuals'][parent2_idx]\n\n        child = uniform_crossover(parent1, parent2)\n        child = inversion_mutation(child)\n        child = greedy_repair(child)\n\n        new_pops[i] = child\n\n    return new_pops",
          "objective": 0.98601,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    def crossover(parent1, parent2):\n        \"\"\"Perform crossover between two parents to produce an offspring.\"\"\"\n        crossover_point = np.random.randint(1, N_P)\n        offspring = np.hstack((parent1[:crossover_point], parent2[crossover_point:]))\n        return offspring\n\n    def mutate(individual):\n        \"\"\"Perform mutation on an individual.\"\"\"\n        mutation_point = np.random.randint(N_P)\n        individual[mutation_point] = 1 - individual[mutation_point]\n        return individual\n\n    def repair(individual):\n        \"\"\"Repair an individual if it violates the weight constraint.\"\"\"\n        while np.dot(individual, W) > C:\n            overweight_items = np.where((individual == 1) & (W > 0))[0]\n            if overweight_items.size == 0:\n                break\n            item_to_remove = np.random.choice(overweight_items)\n            individual[item_to_remove] = 0\n        return individual\n\n    def select_parents(rankings):\n        \"\"\"Select parents based on their rankings using a tournament selection.\"\"\"\n        tournament_size = 2\n        selected_indices = np.random.choice(POP_SIZE, tournament_size, replace=False)\n        selected_rankings = rankings[selected_indices]\n        winner_index = selected_indices[np.argmin(selected_rankings)]\n        return pops['individuals'][winner_index]\n\n    # Main steps of the reproduction function\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        parent1 = select_parents(pops['rankings'])\n        parent2 = select_parents(pops['rankings'])\n        offspring = crossover(parent1, parent2)\n        offspring = mutate(offspring)\n        offspring = repair(offspring)\n        new_pops[i] = offspring\n\n    return new_pops",
          "objective": 0.98573,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    def crossover(parent1, parent2):\n        \"\"\"Perform uniform crossover between two parents to produce an offspring.\"\"\"\n        mask = np.random.randint(0, 2, size=N_P)\n        offspring = np.where(mask, parent1, parent2)\n        return offspring\n\n    def mutate(individual):\n        \"\"\"Perform mutation on an individual with a lower probability.\"\"\"\n        for i in range(N_P):\n            if np.random.rand() < 0.1:  # Lower mutation rate\n                individual[i] = 1 - individual[i]\n        return individual\n\n    def repair(individual):\n        \"\"\"Repair an individual if it violates the weight constraint by removing items based on the least profit-to-weight ratio.\"\"\"\n        while np.dot(individual, W) > C:\n            item_efficiency = V[:, 0] / W  # Use only the first profit value for simplicity\n            inefficient_items = np.where((individual == 1) & (W > 0))[0]\n            if inefficient_items.size == 0:\n                break\n            item_to_remove = inefficient_items[np.argmin(item_efficiency[inefficient_items])]\n            individual[item_to_remove] = 0\n        return individual\n\n    def rank_based_selection(rankings):\n        \"\"\"Select parents based on their rankings using rank-based selection.\"\"\"\n        probabilities = 1 / (rankings + 1)  # Higher probability for lower ranks\n        probabilities /= probabilities.sum()  # Normalize to create a probability distribution\n        selected_index = np.random.choice(POP_SIZE, p=probabilities)\n        return pops['individuals'][selected_index]\n\n    # Main steps of the reproduction function\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        parent1 = rank_based_selection(pops['rankings'])\n        parent2 = rank_based_selection(pops['rankings'])\n        offspring = crossover(parent1, parent2)\n        offspring = mutate(offspring)\n        offspring = repair(offspring)\n        new_pops[i] = offspring\n\n    return new_pops",
          "objective": 0.98561,
          "other_inf": null
     },
     {
          "algorithm": "Generate a new population by performing rank-based roulette wheel selection, single-point crossover, bit-flip mutation with adaptive rate, and a random item removal repair strategy.",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    # Backbone idea: Use selection, crossover, mutation, and repair to create a new generation.\n    # New algorithm in one sentence: {Generate a new population by performing rank-based roulette wheel selection, single-point crossover, bit-flip mutation with adaptive rate, and a random item removal repair strategy.}\n    \n    def roulette_wheel_selection(rankings):\n        \"\"\"Select an individual using roulette wheel selection based on rankings.\"\"\"\n        max_rank = np.max(rankings)\n        adjusted_fitness = max_rank - rankings + 1\n        probabilities = adjusted_fitness / np.sum(adjusted_fitness)\n        selected_index = np.random.choice(np.arange(POP_SIZE), p=probabilities)\n        return pops['individuals'][selected_index]\n\n    def single_point_crossover(parent1, parent2):\n        \"\"\"Perform single-point crossover between two parents.\"\"\"\n        point = np.random.randint(1, N_P)\n        return np.concatenate([parent1[:point], parent2[point:]])\n\n    def adaptive_mutation(individual, lower_rate=0.01, upper_rate=0.1):\n        \"\"\"Perform bit-flip mutation with an adaptive mutation rate.\"\"\"\n        rate = lower_rate + (upper_rate - lower_rate) * (1 - np.mean(pops['rankings']))\n        for i in range(N_P):\n            if np.random.rand() < rate:\n                individual[i] = 1 - individual[i]\n        return individual\n\n    def random_repair(individual):\n        \"\"\"Randomly remove items until the weight constraint is satisfied.\"\"\"\n        while np.dot(individual, W) > C:\n            possible_to_remove = np.where(individual == 1)[0]\n            if possible_to_remove.size == 0:\n                break\n            remove_idx = np.random.choice(possible_to_remove)\n            individual[remove_idx] = 0\n        return individual\n\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        parent1 = roulette_wheel_selection(pops['rankings'])\n        parent2 = roulette_wheel_selection(pops['rankings'])\n        offspring = single_point_crossover(parent1, parent2)\n        offspring = adaptive_mutation(offspring)\n        offspring = random_repair(offspring)\n        new_pops[i] = offspring\n\n    return new_pops",
          "objective": 0.98542,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n    \n    def crossover(parent1, parent2):\n        child = np.zeros(N_P, dtype=np.int32)\n        crossover_point = np.random.randint(0, N_P)\n        child[:crossover_point] = parent1[:crossover_point]\n        child[crossover_point:] = parent2[crossover_point:]\n        return child\n\n    def mutate(individual):\n        mutation_index = np.random.randint(0, N_P)\n        individual[mutation_index] = 1 - individual[mutation_index]\n        return individual\n\n    def repair(individual):\n        while np.dot(individual, W) > C:\n            idxs = np.where(individual == 1)[0]\n            if idxs.size == 0:\n                break\n            individual[np.random.choice(idxs)] = 0\n        return individual\n\n    def select_parents(ranked_pop):\n        probabilities = 1 / (1 + np.arange(POP_SIZE))\n        probabilities /= probabilities.sum()\n        parents_idx = np.random.choice(np.arange(POP_SIZE), size=2, p=probabilities, replace=False)\n        return ranked_pop[parents_idx[0]], ranked_pop[parents_idx[1]]\n\n    def generate_new_individual():\n        parent1, parent2 = select_parents(pops['individuals'])\n        child = crossover(parent1, parent2)\n        child = mutate(child)\n        child = repair(child)\n        return child\n\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        new_pops[i] = generate_new_individual()\n    \n    return new_pops",
          "objective": 0.98507,
          "other_inf": null
     },
     {
          "algorithm": "Create a new population by selecting the best individuals, performing uniform crossover, applying a flip-bit mutation, and ensuring feasibility through a greedy repair mechanism.",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    # Backbone idea: Use a combination of selection, crossover, mutation, and repair to generate a new population.\n    # New algorithm in one sentence: {Create a new population by selecting the best individuals, performing uniform crossover, applying a flip-bit mutation, and ensuring feasibility through a greedy repair mechanism.}\n\n    # Select the top individuals based on rankings\n    def select_top_individuals(population, rankings, num_to_select):\n        sorted_indices = np.argsort(rankings)\n        return population[sorted_indices][:num_to_select]\n\n    # Uniform crossover\n    def uniform_crossover(parent1, parent2):\n        mask = np.random.randint(0, 2, size=N_P)\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    # Flip-bit mutation\n    def flip_bit_mutation(individual, mutation_rate=0.1):\n        mutation_mask = np.random.rand(N_P) < mutation_rate\n        individual[mutation_mask] = 1 - individual[mutation_mask]\n        return individual\n\n    # Greedy repair mechanism\n    def greedy_repair(individual, W, C):\n        weight = np.dot(individual, W)\n        while weight > C:\n            # Find the items that can be removed\n            items_to_remove = np.where(individual == 1)[0]\n            # Sort items by weight to remove heavier ones first\n            items_sorted_by_weight = items_to_remove[np.argsort(W[items_to_remove])[::-1]]\n            for item in items_sorted_by_weight:\n                individual[item] = 0\n                weight -= W[item]\n                if weight <= C:\n                    break\n        return individual\n\n    individuals = pops['individuals']\n    rankings = pops['rankings']\n\n    # Select the top 50% of the individuals to ensure quality\n    selected_individuals = select_top_individuals(individuals, rankings, POP_SIZE // 2)\n\n    new_population = []\n    while len(new_population) < POP_SIZE:\n        # Randomly choose two parents from the selected top individuals\n        parent_indices = np.random.choice(len(selected_individuals), 2, replace=False)\n        parent1, parent2 = selected_individuals[parent_indices]\n        child = uniform_crossover(parent1, parent2)\n        child = flip_bit_mutation(child)\n        child = greedy_repair(child, W, C)\n        new_population.append(child)\n\n    new_pops = np.array(new_population, dtype=np.int32)\n    return new_pops",
          "objective": 0.98504,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    import numpy as np\n\n    def rank_based_selection(rankings):\n        # Selects individuals based on rank, with better ranks having higher probability\n        probabilities = 1 / (rankings + 1)  # Add 1 to avoid division by zero\n        probabilities /= probabilities.sum()  # Normalize to create a probability distribution\n        selected_index = np.random.choice(range(len(rankings)), p=probabilities)\n        return selected_index\n\n    def uniform_crossover(parent1, parent2):\n        # Uniform crossover where each gene is chosen randomly from one of the parents\n        mask = np.random.rand(N_P) < 0.5\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(individual, mutation_rate=0.1):\n        # Mutation with a given mutation rate\n        mutation_mask = np.random.rand(N_P) < mutation_rate\n        individual[mutation_mask] = 1 - individual[mutation_mask]\n        return individual\n\n    def greedy_repair(individual):\n        # Repairs the individual by removing items based on lowest value-to-weight ratio until within weight limit\n        while np.dot(individual, W) > C:\n            value_to_weight = np.where(individual == 1, V[:, 0] / W, np.inf)  # Use the first profit as example\n            to_remove = np.argmin(value_to_weight)  # Find the item with the lowest value-to-weight ratio\n            individual[to_remove] = 0\n        return individual\n\n    def create_new_individual():\n        # Creates a new individual using rank-based selection, uniform crossover, and mutation\n        parent1_index = rank_based_selection(pops['rankings'])\n        parent2_index = rank_based_selection(pops['rankings'])\n        parent1 = pops['individuals'][parent1_index]\n        parent2 = pops['individuals'][parent2_index]\n        child = uniform_crossover(parent1, parent2)\n        child = mutate(child)\n        child = greedy_repair(child)\n        return child\n\n    # Main reproduction loop\n    new_pops = np.zeros((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        new_pops[i] = create_new_individual()\n\n    return new_pops",
          "objective": 0.98468,
          "other_inf": null
     }
]