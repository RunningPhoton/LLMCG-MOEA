{
     "algorithm": "The new algorithm combines greedy selection based on value-to-weight ratio with random sampling and ensures weight constraints are met.",
     "code": "def next_generation(pops, W, C, V, POP_SIZE, N_P):\n    # {The new algorithm combines greedy selection based on value-to-weight ratio with random sampling and ensures weight constraints are met.}\n\n    import numpy as np\n\n    # Calculate value-to-weight ratio for each item\n    ratios = np.max(V / W[:, np.newaxis], axis=1)\n\n    # Sort items by their ratio in descending order\n    sorted_indices = np.argsort(-ratios)\n\n    def greedy_individual():\n        # Initialize an empty knapsack\n        individual = np.zeros(N_P, dtype=np.int32)\n        current_weight = 0\n\n        # Add items based on the sorted value-to-weight ratio until the knapsack is full\n        for idx in sorted_indices:\n            if current_weight + W[idx] <= C:\n                individual[idx] = 1\n                current_weight += W[idx]\n        return individual\n\n    def random_sampling():\n        # Initialize an empty knapsack\n        individual = np.zeros(N_P, dtype=np.int32)\n        available_indices = np.arange(N_P)\n        current_weight = 0\n\n        # Randomly add items until the knapsack is full or no items can be added\n        while current_weight <= C and available_indices.size > 0:\n            idx = np.random.choice(available_indices)\n            if current_weight + W[idx] <= C:\n                individual[idx] = 1\n                current_weight += W[idx]\n            available_indices = available_indices[available_indices != idx]\n\n        return individual\n\n    # Generate new population\n    new_pops = np.empty((POP_SIZE, N_P), dtype=np.int32)\n    for i in range(POP_SIZE):\n        if np.random.rand() < 0.5:\n            new_pops[i] = greedy_individual()\n        else:\n            new_pops[i] = random_sampling()\n\n    return new_pops",
     "objective": 0.98978,
     "other_inf": null
}