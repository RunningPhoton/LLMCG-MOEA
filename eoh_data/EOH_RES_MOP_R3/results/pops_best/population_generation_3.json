{
     "algorithm": "A reproduction function that combines rank-based roulette wheel selection, uniform crossover, and dynamic mutation rate adjustment with an optional elitism strategy to generate the next population.",
     "code": "def next_generation(pops, search_trajectory, xlb, xub, POP_SIZE, N_P, current_gen, max_gen):\n    \"\"\"\n    {A reproduction function that combines rank-based roulette wheel selection, uniform crossover, and dynamic mutation rate adjustment with an optional elitism strategy to generate the next population.}\n    \"\"\"\n    import numpy as np\n    \n    def roulette_wheel_selection(rankings):\n        max_rank = np.max(rankings)\n        selection_prob = (max_rank + 1 - rankings) / np.sum(max_rank + 1 - rankings)\n        selected_index = np.random.choice(np.arange(POP_SIZE), p=selection_prob)\n        return pops['individuals'][selected_index]\n\n    def uniform_crossover(parent1, parent2):\n        child = np.where(np.random.rand(N_P) < 0.5, parent1, parent2)\n        return child\n\n    def dynamic_mutation(individual, current_gen, max_gen):\n        mutation_rate = 0.1 * (1 - (current_gen / max_gen))\n        mutation_vector = np.random.rand(N_P) < mutation_rate\n        mutation_amount = np.random.normal(0, (xub - xlb) / 20.0, N_P)\n        individual = np.where(mutation_vector, individual + mutation_amount, individual)\n        return np.clip(individual, xlb, xub)\n\n    def elitism_strategy(elite_size=2):\n        elite_individuals = pops['individuals'][:elite_size]\n        return elite_individuals\n\n    new_pops = np.empty((POP_SIZE, N_P))\n    elite_individuals = elitism_strategy()\n    new_pops[:len(elite_individuals)] = elite_individuals\n\n    for i in range(len(elite_individuals), POP_SIZE):\n        parent1 = roulette_wheel_selection(pops['rankings'])\n        parent2 = roulette_wheel_selection(pops['rankings'])\n        child = uniform_crossover(parent1, parent2)\n        child = dynamic_mutation(child, current_gen, max_gen)\n        new_pops[i] = child\n\n    return new_pops",
     "objective": 0.59486,
     "other_inf": null
}